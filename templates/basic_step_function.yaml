AWSTemplateFormatVersion: "2010-09-09"

Description: {{ metadata['description'] }}

Metadata:
  CommitHash: {{ metadata['commit_hash'] }}
  CommitMessage: {{ metadata['commit_message'] }}

Parameters:
  ResourcePrefix:
    Type: String
    Description: A description to identify resources  (e.g. "my-perf-test")
    MinLength: 2

  Timeout:
    Type: Number
    Description: Timeout for the function in seconds

  MemorySize:
    Type: Number
    Description: Memory for the function in MB


Resources:
  MyStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        "Fn::Sub":
          - |-
            {
              "Comment": "A Hello World state machine example that builds a greeting in one state and sends it to the other to be uppercased",
              "StartAt": "Greeter",
              "States": {
                "Greeter": {
                  "Type": "Task",
                  "Resource": "${lambdaArn1}",
                  "Next": "Uppercaser"
                },
                "Uppercaser": {
                  "Type": "Task",
                  "Resource": "${lambdaArn2}",
                  "End": true
                }
              }
            }
          - lambdaArn1: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
            lambdaArn2: { "Fn::GetAtt": [ LambdaFunction2, Arn ] }
      RoleArn:
        "Fn::Sub":
          "arn:aws:iam::${AWS::AccountId}:role/service-role/StatesExecutionRole-${AWS::Region}"


  LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      Comment:
        "Fn::Sub":
          "Function for ${ResourcePrefix}"
    DependsOn: [ LambdaFunctionExecutionRole ]
    Properties:
      Code:
        ZipFile:
          "Fn::Sub": |
            import json
            import logging

            logging.basicConfig()
            logger = logging.getLogger(__name__)
            logger.setLevel(logging.INFO)

            def handler(event, context):
                logger.info('Event: ' + json.dumps(event))
                logger.info('Context: ' + str(dir(context)))
                message = 'Hello, ' + event['name'] + '!'
                return { 'message': message }

      Role: { "Fn::GetAtt": [ LambdaFunctionExecutionRole, Arn ] }
      Timeout: { Ref: Timeout }
      Handler: index.handler
      Runtime: python2.7
      MemorySize: { Ref: MemorySize }

  Policy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - { Ref: LambdaFunctionExecutionRole }
      PolicyName: CommonPolicyForLambdaAndDevelopment
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - "ec2:DescribeSecurityGroups"
            Resource: "*"


  # The IAM role that the lambda function will execute under.
  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - "Fn::Join":
                  - ""
                  - - "arn:aws:iam::"
                    - { Ref: "AWS::AccountId" }
                    - ":"
                    - "root"
            Action:
              - sts:AssumeRole
      Path: /
      # # Optional:
      # ManagedPolicyArns:
      #   - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess


  LambdaFunction2:
    Type: AWS::Lambda::Function
    Metadata:
      Comment:
        "Fn::Sub":
          "Function for ${ResourcePrefix}"
    DependsOn: [ LambdaFunctionExecutionRole2 ]
    Properties:
      Code:
        ZipFile:
          "Fn::Sub": |
            import json
            import logging

            logging.basicConfig()
            logger = logging.getLogger(__name__)
            logger.setLevel(logging.INFO)

            def handler(event, context):
                logger.info('Event: ' + json.dumps(event))
                logger.info('Context: ' + str(dir(context)))
                return { 'message': event['message'].upper() }



      Role: { "Fn::GetAtt": [ LambdaFunctionExecutionRole2, Arn ] }
      Timeout: { Ref: Timeout }
      Handler: index.handler
      Runtime: python2.7
      MemorySize: { Ref: MemorySize }

  Policy2:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - { Ref: LambdaFunctionExecutionRole2 }
      PolicyName: CommonPolicyForLambdaAndDevelopment2
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - "ec2:DescribeSecurityGroups"
            Resource: "*"
          # - Effect: Allow
          #   Action:
          #     - "lambda:InvokeFunction"
          #   Resource:
          #     "Fn::GetAtt": [ LambdaFunction, Arn ]


  # The IAM role that the lambda function will execute under.
  LambdaFunctionExecutionRole2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - "Fn::Join":
                  - ""
                  - - "arn:aws:iam::"
                    - { Ref: "AWS::AccountId" }
                    - ":"
                    - "root"
            Action:
              - sts:AssumeRole
      Path: /
      # # Optional:
      # ManagedPolicyArns:
      #   - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess



Outputs:
  LambdaFunction:
    Value: { Ref : LambdaFunction }
  LambdaFunctionARN:
    Value: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
  LambdaFunctionExecutionRole:
    Value: { Ref : LambdaFunctionExecutionRole }
  LambdaFunctionExecutionRoleARN:
    Value: { "Fn::GetAtt": [ LambdaFunctionExecutionRole, Arn ] }
  SigninUrl:
    Value:
      "Fn::Sub": |
        https://signin.aws.amazon.com/switchrole?account=${AWS::AccountId}&roleName=${LambdaFunctionExecutionRole}&displayName=assumed-role
  LambdaCommand:
    Value:
      "Fn::Sub": |
        aws lambda invoke --function-name ${LambdaFunction} /tmp/${LambdaFunction}-output.txt --payload '{"name": "alice"}'; cat /tmp/${LambdaFunction}-output.txt

  LambdaFunction2:
    Value: { Ref : LambdaFunction2 }
  LambdaFunctionARN2:
    Value: { "Fn::GetAtt": [ LambdaFunction2, Arn ] }
  LambdaFunctionExecutionRole2:
    Value: { Ref : LambdaFunctionExecutionRole2 }
  LambdaFunctionExecutionRoleARN2:
    Value: { "Fn::GetAtt": [ LambdaFunctionExecutionRole2, Arn ] }
  SigninUrl2:
    Value:
      "Fn::Sub": |
        https://signin.aws.amazon.com/switchrole?account=${AWS::AccountId}&roleName=${LambdaFunctionExecutionRole2}&displayName=assumed-role
  LambdaCommand2:
    Value:
      "Fn::Sub": |
        aws lambda invoke --function-name ${LambdaFunction2} /tmp/${LambdaFunction2}-output.txt --payload '{"message": "Hello, bob!"}'; cat /tmp/${LambdaFunction2}-output.txt
  StepCommand:
    Value:
      "Fn::Sub": |
        aws stepfunctions start-execution --state-machine-arn ${MyStateMachine} --name "`hostname`-`date +%Y%m%d_%H%M%S%Z`" --input '{"name": "joe"}'
