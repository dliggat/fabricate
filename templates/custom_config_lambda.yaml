AWSTemplateFormatVersion: "2010-09-09"

Description: {{ metadata['description'] }}

Metadata:
  CommitHash: {{ metadata['commit_hash'] }}
  CommitMessage: {{ metadata['commit_message'] }}

Parameters:
  ResourcePrefix:
    Type: String
    Description: A description to identify resources  (e.g. "my-perf-test")
    MinLength: 2

  Timeout:
    Type: Number
    Description: Timeout for the function in seconds

  MemorySize:
    Type: Number
    Description: Memory for the function in MB



Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      Comment:
        "Fn::Sub":
          "Function for ${ResourcePrefix}"
    DependsOn: [ LambdaFunctionExecutionRole ]
    Properties:
      Code:
        ZipFile:
          "Fn::Join":
            - "\n"
            - - "def handler(event, context):"
              - "    print('This is a no-op; will be overwritten later.')"
      Role: { "Fn::GetAtt": [ LambdaFunctionExecutionRole, Arn ] }
      Timeout: { Ref: Timeout }
      Handler: index.handler
      Runtime: python2.7
      MemorySize: { Ref: MemorySize }

  Policy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - { Ref: LambdaFunctionExecutionRole }
      Users:
        - { Ref: LocalDevelopmentUser }
      PolicyName: CommonPolicyForLambdaAndDevelopment
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - "config:Put*"
            Resource: "*"

  LocalDevelopmentUser:
    Type: AWS::IAM::User
    # Optional:
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess


  # The IAM role that the lambda function will execute under.
  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action:
              - sts:AssumeRole
      Path: /
      # Optional:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess


  # Permits the events service to invoke the service.
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      # SourceArn:
      #   "Fn::GetAtt": [ ConfigRuleCustomLambda, Arn ]
      FunctionName: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
      Principal: config.amazonaws.com


  ConfigRuleCustomLambda:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: ConfigRuleMFACompliance
      Scope:
        # ComplianceResourceId:
        #   Ref: Ec2Volume
        ComplianceResourceTypes:
          # - "AWS::IAM::User"
          - "AWS::EC2::Instance"
      Source:
        Owner: "CUSTOM_LAMBDA"
        SourceDetails:
          -
            EventSource: "aws.config"
            MessageType: "ConfigurationItemChangeNotification"
        SourceIdentifier:
          Fn::GetAtt:
            - LambdaFunction
            - Arn
    DependsOn: LambdaFunction


Outputs:
  LambdaFunction:
    Value: { Ref : LambdaFunction }
  LambdaFunctionARN:
    Value: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
  LambdaFunctionExecutionRole:
    Value: { Ref : LambdaFunctionExecutionRole }
  LambdaFunctionExecutionRoleARN:
    Value: { "Fn::GetAtt": [ LambdaFunctionExecutionRole, Arn ] }
  LocalDevelopmentUser:
    Value: { Ref : LambdaFunctionExecutionRole }
